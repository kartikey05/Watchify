{"version":3,"sources":["features/counterSlice.js","features/counter/counterAPI.js","app/store.js","axios.js","Request.js","screens/HomeScreen.js","screens/LoginScreen.js","App.js","reportWebVitals.js","index.js"],"names":["incrementAsync","createAsyncThunk","async","amount","arguments","length","undefined","Promise","resolve","setTimeout","data","fetchCount","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","axios","create","baseURL","API_KEY","concat","HomeScreen","LoginScreen","React","createElement","className","src","alt","App","Router","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","container","document","getElementById","createRoot","render","StrictMode","Provider"],"mappings":"6UAGA,MAUaA,EAAiBC,YAC5B,qBACAC,gBCdK,WAAiC,IAAbC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAClC,OAAO,IAAIG,QAASC,GAClBC,WAAW,IAAMD,EAAQ,CAAEE,KAAMP,IAAW,MDarBQ,CAAWR,IAElBO,MAIPE,EAAeC,YAAY,CACtCC,KAAM,UACNC,aArBmB,CACnBC,MAAO,EACPC,OAAQ,QAqBRC,SAAU,CACRC,UAAYC,IAKVA,EAAMJ,OAAS,GAEjBK,UAAYD,IACVA,EAAMJ,OAAS,GAGjBM,kBAAmBA,CAACF,EAAOG,KACzBH,EAAMJ,OAASO,EAAOC,UAK1BC,cAAgBC,IACdA,EACGC,QAAQ3B,EAAe4B,QAAUR,IAChCA,EAAMH,OAAS,YAEhBU,QAAQ3B,EAAe6B,UAAW,CAACT,EAAOG,KACzCH,EAAMH,OAAS,OACfG,EAAMJ,OAASO,EAAOC,cAKjB,UAAEL,EAAS,UAAEE,EAAS,kBAAEC,GAAsBV,EAAakB,QAgBzDlB,QAAoB,QErE5B,MAAMmB,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,K,8BCHGC,EAAMC,OAAO,CACzBC,QAAQ,iCCHZ,MAAMC,EAAU,mCAEA,8BAADC,OAAgCD,EAAO,mBAC/B,wBAADC,OAA0BD,EAAO,sBACvC,4BAADC,OAA8BD,EAAO,mBAChC,2BAADC,OAA6BD,EAAO,mBACnC,2BAADC,OAA6BD,EAAO,mBACnC,2BAADC,OAA6BD,EAAO,mBAClC,2BAADC,OAA6BD,EAAO,sBACnC,2BAADC,OAA6BD,EAAO,mB,MCazCE,I,mBCRAC,MAXf,WACI,OACIC,IAAAC,cAAA,OAAKC,UAAU,eACXF,IAAAC,cAAA,OAAKC,UAAU,0BACXF,IAAAC,cAAA,OAAKC,UAAU,oBAAoBC,IAAI,kEAAkEC,IAAI,KAC7GJ,IAAAC,cAAA,UAAQC,UAAU,uBAAsB,UACxCF,IAAAC,cAAA,OAAKC,UAAU,4BCmBhBG,MAjBf,WAGE,OACEL,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAACK,IAAM,KAEHN,IAAAC,cAACF,EAAW,SCNPQ,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,M,MCCd,MAAMS,EAAYC,SAASC,eAAe,QAC7BC,qBAAWH,GAEnBI,OACHrB,IAAAC,cAACD,IAAMsB,WAAU,KACftB,IAAAC,cAACsB,IAAQ,CAACnC,MAAOA,GACfY,IAAAC,cAACI,EAAG,SAQVE,M","file":"static/js/main.7f1e95b7.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counter/counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","import axios from'axios';\r\n\r\nconst instance =axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","const API_KEY = \"5fe00de2ac8a724273d7c906df7532a2\";\r\nconst request = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOrginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default request;\r\n","import React from 'react'\r\nimport \"./HomeScreen.css\"\r\nimport Nav from '../Nav';\r\nimport Banner from '../Banner';\r\nimport requests from '../Request';\r\nimport Row from '../Row';\r\nfunction HomeScreen() {\r\n    return (\r\n      <div className=\"homeScreen\">\r\n        <Nav />\r\n        <Banner />\r\n        <Row key=\"trending\" title=\"Trending Now\" fetchUrl={requests.fetchTrending} isLargeRow />\r\n        <Row key=\"top-rated\" title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n        <Row key=\"action-movies\" title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n        <Row key=\"comedy-movies\" title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n        <Row key=\"horror-movies\" title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n        <Row key=\"romance-movies\" title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n        <Row key=\"documentaries\" title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n      </div>\r\n    );\r\n  }\r\n  \r\nexport default HomeScreen;","import React from 'react'\r\nimport './LoginScreen.css'\r\n\r\nfunction LoginScreen(){\r\n    return (\r\n        <div className=\"loginScreen\">\r\n            <div className=\"loginScreen_background\">\r\n                <img className=\"loginScreen__logo\" src=\"https://variety.com/wp-content/uploads/2020/05/netflix-logo.png\" alt=\"\"/>\r\n                <button className='loginScreen__button'>Sgn in</button>\r\n                <div className='loginScreen_gradient'/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LoginScreen;","import React from 'react';\nimport './App.css';\nimport HomeScreen from './screens/HomeScreen';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from 'react-router-dom';\nimport LoginScreen from './screens/LoginScreen';\n\n\nfunction App() {\n  const user=null;\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ?(\n          <LoginScreen />\n        ):(\n        <Routes>\n          <Route exact path=\"/\" element={<HomeScreen />} />\n        </Routes>)}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}